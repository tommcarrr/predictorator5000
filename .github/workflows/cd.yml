name: CD

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0'
      - name: Build
        run: dotnet build Predictorator.sln --configuration Release
      - name: Publish
        run: dotnet publish Predictorator.sln -c Release -o publish
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: app
          path: publish

  deploy_prod:
    runs-on: ubuntu-latest
    needs: build
    environment: production
    outputs:
      url: ${{ steps.deploy.outputs.webapp-url }}
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: app
      - uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      - name: Deploy to production
        id: deploy
        uses: azure/webapps-deploy@v3
        with:
          app-name: 'predictorator5000'
          slot-name: 'Production'
          package: ./

  tests:
    runs-on: ubuntu-latest
    needs: deploy_prod
    if: always()
    env:
      RUN_UI_TESTS: 'true'
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0'
      - name: Install Playwright browsers
        run: |
          dotnet tool install --global Microsoft.Playwright.CLI
          export PATH="$PATH:/root/.dotnet/tools"
          playwright install --with-deps
      - name: Run all tests
        run: dotnet test Predictorator.sln --logger trx -- RunConfiguration.TestRunParameters.Parameter(name=BaseUrl,value=${{ needs.deploy_prod.outputs.url }})

  rollback:
    if: failure() && needs.tests.result == 'failure'
    runs-on: ubuntu-latest
    needs: [deploy_prod, tests]
    steps:
      - uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      - name: Rollback deployment
        run: |
          echo "Rolling back to previous deployment"
          # Implement rollback logic here, for example using az webapp deployment
          # az webapp deployment source config-zip --src <previous package>
