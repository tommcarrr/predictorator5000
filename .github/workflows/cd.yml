name: CD

on:
  push:
    branches:
      - main

# Required for Azure login using OIDC
permissions:
  contents: read
  id-token: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0'
      - name: Build
        run: dotnet build Predictorator.sln --configuration Release
      - name: Publish
        run: dotnet publish Predictorator.sln -c Release -o publish
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: app
          path: publish

  deploy_prod:
    runs-on: ubuntu-latest
    needs: build
    environment: Production
    outputs:
      url: ${{ steps.deploy.outputs.webapp-url }}
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: app
      - uses: actions/checkout@v4
      - uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZUREAPPSERVICE_CLIENTID_2687F5A3498747E1A95ADE36D92A159E }}
          tenant-id: ${{ secrets.AZUREAPPSERVICE_TENANTID_F68BC6B164FA4A818B4561CE37FB31B5 }}
          subscription-id: ${{ secrets.AZUREAPPSERVICE_SUBSCRIPTIONID_E02E41A1857446D5AE38550D3A7CF31C }}
      - name: Deploy to production
        id: deploy
        uses: azure/webapps-deploy@v3
        with:
          app-name: 'predictorator5000'
          slot-name: 'Production'
          package: ./
      - name: Get publish profile
        id: get_profile
        run: |
          RG=$(az webapp list --query "[?name=='predictorator5000'].resourceGroup" -o tsv)
          az webapp deployment list-publishing-profiles \
            --name predictorator5000 --resource-group "$RG" \
            --output json > profile.json
          scm_host=$(jq -r '.[0].publishUrl' profile.json | cut -d: -f1)
          echo "scm_url=https://$scm_host" >> "$GITHUB_OUTPUT"
          auth=$(jq -r '.[0].userName + ":" + .[0].userPWD' profile.json | base64)
          echo "auth=$auth" >> "$GITHUB_OUTPUT"

      - name: Download database
        run: |
          curl -f -L -o predictorator.db \
            -H "Authorization: Basic ${{ steps.get_profile.outputs.auth }}" \
            "${{ steps.get_profile.outputs.scm_url }}/api/vfs/home/.local/share/predictorator.db" \
            || touch predictorator.db

      - name: Run Flyway migrations
        uses: joshuaavalon/flyway-action@v3.0.0
        with:
          url: 'jdbc:sqlite:predictorator.db'
          locations: 'filesystem:./flyway/sql'
          flyway-version: '11.9.1'

      - name: Upload database
        run: |
          curl -T predictorator.db \
            -H "Authorization: Basic ${{ steps.get_profile.outputs.auth }}" \
            "${{ steps.get_profile.outputs.scm_url }}/api/vfs/home/.local/share/predictorator.db"

  tests:
    runs-on: ubuntu-latest
    needs: deploy_prod
    env:
      RUN_UI_TESTS: 'true'
      BASE_URL: ${{ needs.deploy_prod.outputs.url }}
      UI_TEST_TOKEN: ${{ secrets.TEST_TOKEN }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0'
      - name: Build tests
        run: dotnet build Predictorator.sln --configuration Release
      - name: Install Playwright browsers
        run: |
          dotnet tool install --global Microsoft.Playwright.CLI
          export PATH="$PATH:/root/.dotnet/tools"
          playwright install
      - name: Run all tests
        run: dotnet test Predictorator.sln --logger trx --no-build --configuration Release


  rollback:
    if: failure() && needs.tests.result == 'failure'
    runs-on: ubuntu-latest
    needs: [deploy_prod, tests]
    steps:
      - uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZUREAPPSERVICE_CLIENTID_2687F5A3498747E1A95ADE36D92A159E }}
          tenant-id: ${{ secrets.AZUREAPPSERVICE_TENANTID_F68BC6B164FA4A818B4561CE37FB31B5 }}
          subscription-id: ${{ secrets.AZUREAPPSERVICE_SUBSCRIPTIONID_E02E41A1857446D5AE38550D3A7CF31C }}
      - name: Rollback deployment
        run: |
          echo "Rolling back to previous deployment"
          # Implement rollback logic here

