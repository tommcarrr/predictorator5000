@implements IDisposable
@inherits LayoutComponentBase
@inject IHttpContextAccessor HttpContextAccessor
@inject ThemeService ThemeService
<MudLayout>
<MudThemeProvider @rendermode="InteractiveServer"
                      Theme="@ThemeService.CurrentTheme"
                      IsDarkMode="@ThemeService.IsDarkMode"
                      IsDarkModeChanged="@ThemeService.SetDarkModeAsync" />

    <MudPopoverProvider  @rendermode="InteractiveServer" />
    <MudDialogProvider    @rendermode="InteractiveServer" />
    <MudSnackbarProvider  @rendermode="InteractiveServer" />
    <MudAppBar Elevation="1" Color="Color.Primary">
        <MudText Typo="Typo.h5" Class="ml-2"><a href="/" class="app-title-link">Predictotronix</a></MudText>
        <MudSpacer />
        @if (HttpContextAccessor.HttpContext?.User.Identity?.IsAuthenticated == true &&
            HttpContextAccessor.HttpContext.User.IsInRole("Admin"))
        {
            <MudButton Variant="Variant.Text" Href="/Admin/SendNotification">Admin</MudButton>
        }
        <SubscribeButton />
        <LoginDisplay />
        <DarkModeToggle />
        <CeefaxToggle />
    </MudAppBar>

    <MudMainContent>
        <MudContainer MaxWidth="MaxWidth.Large">
            @Body
        </MudContainer>
    </MudMainContent>

</MudLayout>

@code {
    protected override void OnInitialized()
    {
        ThemeService.OnChange += OnThemeChanged;
    }

    private void OnThemeChanged() => InvokeAsync(StateHasChanged);

    public void Dispose()
    {
        ThemeService.OnChange -= OnThemeChanged;
    }
}
