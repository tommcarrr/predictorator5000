@implements IDisposable
@inherits LayoutComponentBase
@inject IHttpContextAccessor HttpContextAccessor
@inject ThemeService ThemeService
@inject IBrowserStorage Storage

<MudThemeProvider @rendermode="InteractiveServer"
                  Theme="@ThemeService.CurrentTheme"
                  @bind-IsDarkMode="@IsDarkMode"/>
<MudPopoverProvider @rendermode="InteractiveServer"/>
<MudDialogProvider @rendermode="InteractiveServer"/>
<MudSnackbarProvider @rendermode="InteractiveServer"/>
<CascadingValue Value="this">
<MudLayout>
    <ToastInit/>
    <MudAppBar Elevation="1" Color="Color.Primary">
        <MudText Typo="Typo.h5" Class="ml-2">
            <a href="/" style="color:inherit;text-decoration:none">Predictotronix</a>
        </MudText>
        <MudSpacer/>
        @if (HttpContextAccessor.HttpContext?.User.Identity?.IsAuthenticated == true &&
             HttpContextAccessor.HttpContext.User.IsInRole("Admin"))
        {
            <MudButton Variant="Variant.Text" Href="/Admin/SendNotification">Admin</MudButton>
        }
        <SubscribeButton/>
        <SupportLink/>
        <DarkModeToggle/>
        <CeefaxToggle/>
    </MudAppBar>

    <MudMainContent>
        <MudContainer MaxWidth="MaxWidth.Large">
            @Body
        </MudContainer>
    </MudMainContent>

</MudLayout>
</CascadingValue>

@code {
    public bool IsDarkMode { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var stored = await Storage.GetAsync("darkMode");
            if (stored.HasValue)
            {
                IsDarkMode = stored.Value;
            }

            await ThemeService.InitializeAsync();
            ThemeService.OnChange += OnThemeChanged;
            await InvokeAsync(StateHasChanged);
        }
    }

    public async Task ToggleDarkModeAsync()
    {
        IsDarkMode = !IsDarkMode;
        await Storage.SetAsync("darkMode", IsDarkMode);
        await InvokeAsync(StateHasChanged);
    }

    private void OnThemeChanged() => InvokeAsync(StateHasChanged);

    public void Dispose()
    {
        ThemeService.OnChange -= OnThemeChanged;
    }

}