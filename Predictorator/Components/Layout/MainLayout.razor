@implements IDisposable
@inherits LayoutComponentBase
@inject IHttpContextAccessor HttpContextAccessor
@inject IJSRuntime Js
@inject IBrowserStorage Storage

<MudThemeProvider @rendermode="InteractiveServer"
                  Theme="@CurrentTheme"
                  @bind-IsDarkMode="@IsDarkMode"/>
<MudPopoverProvider @rendermode="InteractiveServer"/>
<MudDialogProvider @rendermode="InteractiveServer"/>
<MudSnackbarProvider @rendermode="InteractiveServer"/>
<CascadingValue Value="this">
<MudLayout>
    <ToastInit/>
    <MudAppBar Elevation="1" Color="Color.Primary">
        <MudText Typo="Typo.h5" Class="ml-2">
            <a href="/" style="color:inherit;text-decoration:none">Predictotronix</a>
        </MudText>
        <MudSpacer/>
        @if (HttpContextAccessor.HttpContext?.User.Identity?.IsAuthenticated == true &&
             HttpContextAccessor.HttpContext.User.IsInRole("Admin"))
        {
            <MudButton Variant="Variant.Text" Href="/Admin/SendNotification">Admin</MudButton>
        }
        <SubscribeButton/>
        <MudTooltip Text="Contribute to hosting costs">
            <MudIconButton Icon="@Icons.Material.Filled.VolunteerActivism"
                           Href="https://paypal.me/tommcarrr?country.x=GB&locale.x=en_GB"
                           Target="_blank" Rel="noopener"
                           Color="Color.Inherit"
                           UserAttributes="@(new Dictionary<string, object>{{"id","donateLink"}})" />
        </MudTooltip>
        <MudIconButton Icon="@(IsDarkMode ? Icons.Material.Filled.LightMode : Icons.Material.Filled.DarkMode)"
                       OnClick="ToggleDarkModeAsync" Color="Color.Inherit"
                       UserAttributes="@(new Dictionary<string, object>{{"id","darkModeToggle"}})" />
        <MudIconButton Icon="@Icons.Material.Outlined.Article"
                      OnClick="ToggleCeefaxAsync" Color="@(IsCeefax ? Color.Inherit : Color.Dark)"
                      UserAttributes="@(new Dictionary<string, object>{{"id","ceefaxToggle"}})" />
    </MudAppBar>

    <MudMainContent>
        <MudContainer MaxWidth="MaxWidth.Large">
            @Body
        </MudContainer>
    </MudMainContent>

</MudLayout>
</CascadingValue>

@code {
    public bool IsDarkMode { get; set; }
    public bool IsCeefax { get; set; }

    private MudTheme CeefaxTheme { get; } = new()
    {
        PaletteDark = new PaletteDark
        {
            Background = "#000000",
            Surface = "#000000",
            TextPrimary = "#FFFFFF",
            TextSecondary = "#CCCCCC",
            Primary = "#0000FF",
            Secondary = "#00FF00",
            Info = "#00FFFF",
            Success = "#00FF00",
            Warning = "#FFFF00",
            Error = "#FF0000",
            AppbarBackground = "#0000FF",
            AppbarText = "#00FF00",
            DrawerBackground = "#000000",
            DrawerText = "#FFFFFF",
            ActionDefault = "#FFFFFF",
            ActionDisabled = "#555555",
            ActionDisabledBackground = "#222222"
        }
    };

    private MudTheme? CurrentTheme => IsCeefax ? CeefaxTheme : null;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var dark = await Storage.GetAsync("darkMode");
            if (dark.HasValue)
                IsDarkMode = dark.Value;

            var ceefax = await Storage.GetAsync("ceefaxMode");
            if (ceefax.HasValue)
                IsCeefax = ceefax.Value;

            await Js.InvokeVoidAsync("app.setCeefax", IsCeefax);
            await InvokeAsync(StateHasChanged);
        }
    }

    public async Task ToggleDarkModeAsync()
    {
        IsDarkMode = !IsDarkMode;
        await Storage.SetAsync("darkMode", IsDarkMode);
        await InvokeAsync(StateHasChanged);
    }

    public async Task ToggleCeefaxAsync()
    {
        IsCeefax = !IsCeefax;
        await Storage.SetAsync("ceefaxMode", IsCeefax);
        await Js.InvokeVoidAsync("app.setCeefax", IsCeefax);
        await InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
    }

}