@inherits LayoutComponentBase
@inject IHttpContextAccessor HttpContextAccessor
@inject BrowserInteropService Browser
<MudLayout>
    <MudAppBar Elevation="0" Color="Color.Primary">
        <div class="container-fluid d-flex align-items-center">
            <MudText Typo="Typo.h5" Class="navbar-brand header">Predictotronix</MudText>
            @if (HttpContextAccessor.HttpContext?.User.Identity?.IsAuthenticated == true &&
                HttpContextAccessor.HttpContext.User.IsInRole("Admin"))
            {
                <MudLink Href="/mvc/Admin/SendNotification" Class="nav-link">Admin</MudLink>
            }
            <MudLink Href="/mvc/Subscription/Subscribe" Class="nav-link">Subscribe</MudLink>
            <MudSpacer />
            <MudButton Variant="Variant.Outlined"
                       UserAttributes="@(new Dictionary<string, object> { { "id", "darkModeToggle" } })"
                       OnClick="ToggleDarkMode">@(_darkMode ? "Light Mode" : "Dark Mode")</MudButton>
        </div>
    </MudAppBar>
    <MudMainContent>
        <div class="container mt-4">
            @Body
        </div>
    </MudMainContent>
</MudLayout>

@code {
    private bool _darkMode;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _darkMode = await Browser.GetDarkModeAsync();
            await Browser.SetDarkModeAsync(_darkMode);
            StateHasChanged();
        }
    }

    private async Task ToggleDarkMode()
    {
        _darkMode = !_darkMode;
        await Browser.SetDarkModeAsync(_darkMode);
        await Browser.SaveDarkModeAsync(_darkMode);
    }
}
