@inherits LayoutComponentBase
@inject IHttpContextAccessor HttpContextAccessor
@inject BrowserInteropService Browser
@inject IDialogService DialogService
@using Predictorator.Components.Pages.Subscription
<MudLayout>
    <MudDialogProvider />
    <MudAppBar Elevation="1" Color="Color.Primary">
        <MudText Typo="Typo.h5" Class="ml-2">Predictotronix</MudText>
        <MudSpacer />
        @if (HttpContextAccessor.HttpContext?.User.Identity?.IsAuthenticated == true &&
            HttpContextAccessor.HttpContext.User.IsInRole("Admin"))
        {
            <MudButton Variant="Variant.Text" Href="/Admin/SendNotification">Admin</MudButton>
        }
        <MudButton Variant="Variant.Text" OnClick="OpenSubscribe">Subscribe</MudButton>
        <MudIconButton Icon="@(_darkMode ? Icons.Material.Filled.LightMode : Icons.Material.Filled.DarkMode)"
                       OnClick="ToggleDarkMode" />
    </MudAppBar>

    <MudMainContent>
        <MudContainer MaxWidth="MaxWidth.Large">
            @Body
        </MudContainer>
    </MudMainContent>

</MudLayout>

@code {
    private bool _darkMode;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _darkMode = await Browser.GetDarkModeAsync();
            await Browser.SetDarkModeAsync(_darkMode);
            StateHasChanged();
        }
    }

    private async Task ToggleDarkMode()
    {
        _darkMode = !_darkMode;
        await Browser.SetDarkModeAsync(_darkMode);
        await Browser.SaveDarkModeAsync(_darkMode);
    }

    private void OpenSubscribe()
    {
        DialogService.Show<Subscribe>("Subscribe");
    }
}
