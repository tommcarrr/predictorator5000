@implements IDisposable
@inherits LayoutComponentBase
@inject IHttpContextAccessor HttpContextAccessor
@inject IJSRuntime Js
@inject IBrowserStorage Storage
@inject UiModeService UiMode
@inject IDialogService DialogService
@inject NotificationFeatureService NotificationFeatures
@using Predictorator.Components.Pages.Subscription

<MudThemeProvider Theme="@CurrentTheme"
                  @bind-IsDarkMode="@IsDarkMode"/>
<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />
<CascadingValue Value="this">
<MudLayout>
    <ToastInit/>
    @* Ceefax header removed *@
    <MudAppBar Elevation="1" Color="Color.Primary">
        @if (IsCeefax)
        {
            <MudHidden Breakpoint="Breakpoint.SmAndDown">
                <MudText Typo="Typo.h5" Class="ml-2 ceefax-logo">
                    <a href="/" style="color:inherit;text-decoration:none">
                        <span>P</span><span>r</span><span>e</span><span>d</span><span>i</span><span>c</span><span>t</span><span>o</span><span>t</span><span>r</span><span>o</span><span>n</span><span>i</span><span>x</span>
                    </a>
                </MudText>
            </MudHidden>
            <MudHidden Breakpoint="Breakpoint.MdAndUp">
                <MudText Typo="Typo.h6" Class="ml-2 ceefax-logo">
                    <a href="/" style="color:inherit;text-decoration:none">
                        <span>P</span><span>R</span><span>D</span><span>C</span><span>T</span>
                    </a>
                </MudText>
            </MudHidden>
        }
        else
        {
            <MudText Typo="Typo.h5" Class="ml-2">
                <a href="/" style="color:inherit;text-decoration:none">Predictotronix</a>
            </MudText>
        }
        <MudSpacer/>
        <MudHidden Breakpoint="Breakpoint.SmAndDown">
            @if (HttpContextAccessor.HttpContext?.User.Identity?.IsAuthenticated == true &&
                 HttpContextAccessor.HttpContext.User.IsInRole("Admin"))
            {
                <MudButton Variant="Variant.Text" Href="/admin">Admin</MudButton>
            }
            <SubscribeButton/>
            <MudTooltip Text="Contribute to hosting costs">
                <MudIconButton Icon="@Icons.Material.Filled.VolunteerActivism"
                               Href="https://paypal.me/tommcarrr?country.x=GB&locale.x=en_GB"
                               Target="_blank" Rel="noopener"
                               Color="Color.Inherit"
                               UserAttributes="@(new Dictionary<string, object> { { "id", "donateLink" } })"/>
            </MudTooltip>
            <MudIconButton Icon="@(IsDarkMode ? Icons.Material.Filled.LightMode : Icons.Material.Filled.DarkMode)"
                           OnClick="@ToggleDarkModeAsync" Color="Color.Inherit"
                           UserAttributes="@(new Dictionary<string, object> { { "id", "darkModeToggle" } })"/>
            <MudIconButton Icon="@Icons.Material.Outlined.Article"
                           OnClick="@ToggleCeefaxAsync" Color="@(IsCeefax ? Color.Inherit : Color.Dark)"
                           UserAttributes="@(new Dictionary<string, object> { { "id", "ceefaxToggle" } })"/>
        </MudHidden>
        <MudHidden Breakpoint="Breakpoint.MdAndUp">
            <MudMenu>
                <ActivatorContent>
                    <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit"
                                   UserAttributes="@(new Dictionary<string, object> { { "id", "menuToggle" } })" />
                </ActivatorContent>
                <ChildContent>
                    @if (HttpContextAccessor.HttpContext?.User.Identity?.IsAuthenticated == true &&
                         HttpContextAccessor.HttpContext.User.IsInRole("Admin"))
                    {
                        <MudMenuItem Href="/admin">Admin</MudMenuItem>
                    }
                    @if (NotificationFeatures.AnyEnabled)
                    {
                        <MudMenuItem OnClick="@OpenSubscribe" UserAttributes="@(new Dictionary<string, object> { { "id", "subscribeButton" } })">Subscribe</MudMenuItem>
                    }
                    <MudMenuItem Href="https://paypal.me/tommcarrr?country.x=GB&locale.x=en_GB" Target="_blank" UserAttributes="@(new Dictionary<string, object> { { "id", "donateLink" } })">Donate</MudMenuItem>
                    <MudMenuItem OnClick="@ToggleDarkModeAsync" UserAttributes="@(new Dictionary<string, object> { { "id", "darkModeToggle" } })">@((IsDarkMode ? "Light Mode" : "Dark Mode"))</MudMenuItem>
                    <MudMenuItem OnClick="@ToggleCeefaxAsync" Class="@(IsCeefax ? "mud-inherit-text" : "mud-dark-text")" UserAttributes="@(new Dictionary<string, object> { { "id", "ceefaxToggle" } })">Ceefax Mode</MudMenuItem>
                </ChildContent>
            </MudMenu>
        </MudHidden>
    </MudAppBar>

    <MudMainContent>
        <MudContainer MaxWidth="MaxWidth.Large">
            @Body
        </MudContainer>
    </MudMainContent>

</MudLayout>
</CascadingValue>

@code {
    public bool IsDarkMode
    {
        get => UiMode.IsDarkMode;
        private set => UiMode.IsDarkMode = value;
    }

    private bool IsCeefax
    {
        get => UiMode.IsCeefax;
        set => UiMode.IsCeefax = value;
    }

    private static readonly string[] CeefaxFont = new[] { "BBC-Ceefax", "monospace" };

    private MudTheme CeefaxTheme { get; } = new()
    {
        PaletteDark = new PaletteDark
        {
            Background = "#000000",
            Surface = "#000000",
            TextPrimary = "#FFFFFF",
            TextSecondary = "#CCCCCC",
            Primary = "#0000FF",
            Secondary = "#00FF00",
            Info = "#00FFFF",
            Success = "#00FF00",
            Warning = "#FFFF00",
            Error = "#FF0000",
            AppbarBackground = "#0000FF",
            AppbarText = "#00FF00",
            DrawerBackground = "#000000",
            DrawerText = "#FFFFFF",
            ActionDefault = "#FFFFFF",
            ActionDisabled = "#555555",
            ActionDisabledBackground = "#222222"
        },
        Typography = new Typography
        {
            Default = new Default { FontFamily = CeefaxFont },
            H1 = new H1 { FontFamily = CeefaxFont },
            H2 = new H2 { FontFamily = CeefaxFont },
            H3 = new H3 { FontFamily = CeefaxFont },
            H4 = new H4 { FontFamily = CeefaxFont },
            H5 = new H5 { FontFamily = CeefaxFont },
            H6 = new H6 { FontFamily = CeefaxFont },
            Subtitle1 = new Subtitle1 { FontFamily = CeefaxFont },
            Subtitle2 = new Subtitle2 { FontFamily = CeefaxFont },
            Button = new Button { FontFamily = CeefaxFont },
            Body1 = new Body1 { FontFamily = CeefaxFont },
            Body2 = new Body2 { FontFamily = CeefaxFont },
            Caption = new Caption { FontFamily = CeefaxFont },
            Overline = new Overline { FontFamily = CeefaxFont }
        }
    };

    private MudTheme? CurrentTheme => IsCeefax ? CeefaxTheme : null;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var dark = await Storage.GetAsync("darkMode");
            if (dark.HasValue)
                IsDarkMode = dark.Value;

            var ceefax = await Storage.GetAsync("ceefaxMode");
            if (ceefax.HasValue)
            {
                IsCeefax = ceefax.Value;
                if (IsCeefax)
                {
                    IsDarkMode = true;
                    await Storage.SetAsync("darkMode", IsDarkMode);
                }
            }

            await Js.InvokeVoidAsync("app.setCeefax", IsCeefax);
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task ToggleDarkModeAsync()
    {
        IsDarkMode = !IsDarkMode;
        await Storage.SetAsync("darkMode", IsDarkMode);
        await InvokeAsync(StateHasChanged);
    }

    private async Task ToggleCeefaxAsync()
    {
        IsCeefax = !IsCeefax;
        await Storage.SetAsync("ceefaxMode", IsCeefax);
        if (IsCeefax)
        {
            IsDarkMode = true;
            await Storage.SetAsync("darkMode", IsDarkMode);
        }
        await Js.InvokeVoidAsync("app.setCeefax", IsCeefax);
        await InvokeAsync(StateHasChanged);
    }

    private void OpenSubscribe()
    {
        DialogService.Show<Subscribe>("Subscribe");
    }

    public void Dispose()
    {
    }

}