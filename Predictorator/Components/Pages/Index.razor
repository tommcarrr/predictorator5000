@page "/"
@page "/{Season}/gw{Week:int}"
@rendermode InteractiveServer
@inject NavigationManager NavigationManager
@inject IFixtureService FixtureService
@inject IDateRangeCalculator DateRangeCalculator
@inject IGameWeekService GameWeekService
@inject UiModeService UiModeService
@inject IDialogService DialogService
@inject IJSRuntime Js
@inject ISnackbar Snackbar
@inject IConfiguration Config
@using Predictorator.Components.Layout
@using Predictorator.Core.Models
@using System.Text
@using System.Linq
@using Microsoft.Extensions.Configuration

<PageTitle>@PageTitleText</PageTitle>

@if (UiModeService.IsCeefax)
{
    <MudText Typo="Typo.h3" Class="my-4 pa-2 ceefax-title" Align="Align.Center" Color="Color.Success">Premiership Results Fixtures</MudText>
}
else
{
    <MudText Typo="Typo.h3" Class="my-4 pa-2" Align="Align.Center">Premier League Fixtures</MudText>
}

<MudPaper Class="my-4 pa-2" Elevation="1">
    <MudStack Row="false" AlignItems="AlignItems.Center" Justify="Justify.Center" Spacing="1">
        @if (_currentGameWeek != null)
        {
            <MudText Typo="Typo.subtitle2" Align="Align.Center" UserAttributes="@(new Dictionary<string, object>{{"data-testid","gameweekLabel"}})">
                Gameweek @_currentGameWeek.Number
            </MudText>
        }
        <MudStack Row="true" AlignItems="AlignItems.Center" Justify="Justify.Center" Spacing="2">
            <MudIconButton Icon="@Icons.Material.Filled.ChevronLeft" Disabled="!_useGameWeek" OnClick="@(() => ChangeGameWeek(-1))"
                           UserAttributes="@(new Dictionary<string, object>{{"id","prevWeekBtn"}})" />
            <MudText Typo="Typo.h6" Class="d-flex align-center cursor-pointer" @onclick="TogglePicker">
                @($"{_fromDate:dd/MM/yyyy} - {_toDate:dd/MM/yyyy}")
                <MudIcon Icon="@(_showPicker ? Icons.Material.Filled.ExpandLess : Icons.Material.Filled.ExpandMore)" Class="ml-1" />
            </MudText>
            <MudIconButton Icon="@Icons.Material.Filled.ChevronRight" Disabled="!_useGameWeek" OnClick="@(() => ChangeGameWeek(1))"
                           UserAttributes="@(new Dictionary<string, object>{{"id","nextWeekBtn"}})" />
        </MudStack>
    </MudStack>
    <MudCollapse Expanded="_showPicker">
        <MudDateRangePicker DateRange="_selectedRange" DateRangeChanged="RangeChanged" Class="my-2"
                           UserAttributes="@(new Dictionary<string, object>{{"id","dateRangePicker"}})" />
    </MudCollapse>
</MudPaper>

@if (_fixtures == null)
{
    <p>Loading...</p>
}
else if (_fixtures.Response.Any())
{
    var groups = _fixtures.Response.GroupBy(f => f.Fixture.Date.Date).OrderBy(g => g.Key);
    foreach (var group in groups)
    {
        <MudPaper Class="my-4 fixture-group" Elevation="1" data-date="@group.Key.ToString("dddd, MMMM d, yyyy")">
            <MudText Typo="Typo.h6" Class="pa-2" Align="Align.Center" Color="@(UiModeService.IsCeefax ? Color.Success: Color.Inherit)">@group.Key.ToString("dddd, MMMM d, yyyy")</MudText>
            <MudPaper Class="pa-2">
                @foreach (var fixture in group.OrderBy(x => x.Fixture.Date).ThenBy(x => x.Teams.Home.Name))
                {
                    <div class="fixture-row" data-testid="fixture-row">
                        <div class="fixture-line">
                            <MudText Class="team-name home-name" HtmlTag="span" Color="@(UiModeService.IsCeefax ? Color.Info: Color.Inherit)">@fixture.Teams.Home.Name</MudText>
                            <MudImage Src="@fixture.Teams.Home.Logo" Alt="@fixture.Teams.Home.Name" Width="30" Height="30" />
                            <MudNumericField T="int?" Class="score-input" Immediate="true"
                                             HideSpinButtons="true"
                                             @bind-Value="_predictions[fixture.Fixture.Id].Home"
                                             Disabled="@(fixture.Score?.Fulltime.Home != null)" Max="20" Min="0"
                                             UserAttributes="@(new Dictionary<string, object>{{"data-testid","score-input"}})" />
                            <span class="hyphen">-</span>
                            <MudNumericField T="int?" Class="score-input" Immediate="true"
                                             HideSpinButtons="true"
                                             @bind-Value="_predictions[fixture.Fixture.Id].Away"
                                             Disabled="@(fixture.Score?.Fulltime.Away != null)" Max="20" Min="0"
                                             UserAttributes="@(new Dictionary<string, object>{{"data-testid","score-input"}})" />
                            <MudImage Src="@fixture.Teams.Away.Logo" Alt="@fixture.Teams.Away.Name" Width="30" Height="30" />
                            <MudText Class="team-name away-name" HtmlTag="span" Color="@(UiModeService.IsCeefax ? Color.Info: Color.Inherit)">@fixture.Teams.Away.Name</MudText>
                        </div>
                        <div class="fixture-info mud-text-secondary">
                            @{ var ukTz = TimeZoneInfo.FindSystemTimeZoneById("GMT Standard Time");
                               var uk = TimeZoneInfo.ConvertTime(fixture.Fixture.Date, ukTz); }
                            @uk.ToString("h:mm tt") - @fixture.Fixture.Venue.Name
                        </div>
                    </div>
                }
            </MudPaper>
        </MudPaper>
    }
}

<MudStack Class="py-4 bottom-buttons" Spacing="2" Justify="Justify.Center">
    <MudButton Color="Color.Error" Variant="Variant.Filled" OnClick="@FillRandomScores"
               UserAttributes="@(new Dictionary<string, object>{{"id","fillRandomBtn"}})">Complete with Random Scores</MudButton>
    <MudButton Color="Color.Info" Variant="Variant.Filled" OnClick="@ClearScores"
               UserAttributes="@(new Dictionary<string, object>{{"id","clearBtn"}})">Clear Predictions</MudButton>
    <MudButton Color="Color.Success" Variant="Variant.Filled"
               UserAttributes="@(new Dictionary<string, object>{{"id","copyBtn"}})">Copy Predictions to Clipboard</MudButton>
    <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="@OpenEmailDialog"
               UserAttributes="@(new Dictionary<string, object>{{"id","emailBtn"}})">Email Predictions</MudButton>
</MudStack>

@code {
    private FixturesResponse? _fixtures;
    private DateTime? _fromDate;
    private DateTime? _toDate;
    private bool _useGameWeek;
    private bool _showPicker;
    private GameWeek? _currentGameWeek;
    private List<GameWeek>? _gameWeeks;
    private readonly Dictionary<int, PredictionInput> _predictions = new();
    private DateRange _selectedRange = new(null, null);

    [Parameter] public string? Season { get; set; }
    [Parameter] public int? Week { get; set; }

    private string PageTitleText => !string.IsNullOrEmpty(Season) && Week.HasValue
        ? $"Predictotronix | {Season} | GW{Week}"
        : "Predictotronix";

    [Parameter, SupplyParameterFromQuery(Name = "fromDate")] public DateTime? FromDate { get; set; }
    [Parameter, SupplyParameterFromQuery(Name = "toDate")] public DateTime? ToDate { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        var query = QueryHelpers.ParseQuery(new Uri(NavigationManager.Uri).Query);
        if (!query.ContainsKey("fromDate")) FromDate = null;
        if (!query.ContainsKey("toDate")) ToDate = null;

        if (string.IsNullOrEmpty(Season) || !Week.HasValue)
        {
            var next = await GameWeekService.GetNextGameWeekAsync(DateTime.UtcNow.Date);
            if (next != null)
            {
                NavigationManager.NavigateTo($"/{next.Season}/gw{next.Number}", true);
                return;
            }
        }

        if (!string.IsNullOrEmpty(Season) && Week.HasValue)
        {
            _currentGameWeek = await GameWeekService.GetGameWeekAsync(Season, Week.Value);
            if (_currentGameWeek != null)
            {
                FromDate = _currentGameWeek.StartDate;
                ToDate = _currentGameWeek.EndDate;
            }
        }

        var (from, to) = DateRangeCalculator.GetDates(FromDate, ToDate, null);
        _fromDate = from;
        _toDate = to;
        _selectedRange = new DateRange(from, to);
        _useGameWeek = _currentGameWeek != null;
        _gameWeeks ??= await GameWeekService.GetGameWeeksAsync();
        _fixtures = await FixtureService.GetFixturesAsync(from, to);

        if (_fixtures?.Response != null)
        {
            foreach (var f in _fixtures.Response)
            {
                if (!_predictions.ContainsKey(f.Fixture.Id))
                    _predictions[f.Fixture.Id] = new PredictionInput();

                var pred = _predictions[f.Fixture.Id];
                if (pred.Home == null)
                    pred.Home = f.Score?.Fulltime.Home;
                if (pred.Away == null)
                    pred.Away = f.Score?.Fulltime.Away;
            }
        }
    }

    private void Reload()
    {
        var uri = QueryHelpers.AddQueryString("/", new Dictionary<string, string?>
        {
            ["fromDate"] = _fromDate?.ToString("yyyy-MM-dd"),
            ["toDate"] = _toDate?.ToString("yyyy-MM-dd")
        });
        NavigationManager.NavigateTo(uri);
    }

    private void RangeChanged(DateRange range)
    {
        if (range.Start.HasValue && range.End.HasValue)
        {
            var newFrom = range.Start.Value.Date;
            var newTo = range.End.Value.Date;
            if (newFrom == _fromDate && newTo == _toDate)
                return;

            _selectedRange = range;
            _fromDate = newFrom;
            _toDate = newTo;
            Reload();
        }
    }

    private void TogglePicker()
    {
        _showPicker = !_showPicker;
    }

    private void ChangeGameWeek(int delta)
    {
        if (_currentGameWeek == null || _gameWeeks == null)
            return;

        var index = _gameWeeks.FindIndex(g => g.Season == _currentGameWeek.Season && g.Number == _currentGameWeek.Number);
        if (index == -1)
            return;

        var newIndex = index + delta;
        if (newIndex < 0 || newIndex >= _gameWeeks.Count)
            return;

        var gw = _gameWeeks[newIndex];
        NavigationManager.NavigateTo($"/{gw.Season}/gw{gw.Number}");
    }

    private void FillRandomScores()
    {
        var possible = new[] { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,4,4,5 };
        var rnd = new Random();
        if (_fixtures == null) return;

        foreach (var f in _fixtures.Response)
        {
            var pred = _predictions[f.Fixture.Id];
            if (f.Score?.Fulltime.Home == null && pred.Home == null)
                pred.Home = possible[rnd.Next(possible.Length)];
            if (f.Score?.Fulltime.Away == null && pred.Away == null)
                pred.Away = possible[rnd.Next(possible.Length)];
        }
    }

    private void ClearScores()
    {
        if (_fixtures == null) return;
        foreach (var f in _fixtures.Response)
        {
            var pred = _predictions[f.Fixture.Id];
            if (f.Score?.Fulltime.Home == null)
                pred.Home = null;
            if (f.Score?.Fulltime.Away == null)
                pred.Away = null;
        }
    }

    private async Task OpenEmailDialog()
    {
        if (!AllPredicted())
        {
            Snackbar.Add("Please fill in all score predictions before emailing.", Severity.Error);
            return;
        }

        var stored = await Js.InvokeAsync<string?>("localStorage.getItem", EmailStorageKey);
        if (string.Equals(stored, "null", StringComparison.OrdinalIgnoreCase) || string.IsNullOrWhiteSpace(stored))
            stored = null;
        var parameters = new DialogParameters
        {
            ["InitialEmail"] = stored
        };

        var options = new DialogOptions { CloseButton = true, FullWidth = true, MaxWidth = MaxWidth.Small };
        var dialog = DialogService.Show<EmailDialog>("Send Predictions", parameters, options);
        var result = await dialog.Result;
        if (result is { Canceled: false, Data: EmailDialogResult data })
        {
            if (data.Remember)
                await Js.InvokeVoidAsync("localStorage.setItem", EmailStorageKey, data.Email);
            else
                await Js.InvokeVoidAsync("localStorage.removeItem", EmailStorageKey);

            SendEmail(data.Email);
        }
    }

    private bool AllPredicted()
    {
        if (_fixtures == null) return false;
        foreach (var f in _fixtures.Response)
        {
            var pred = _predictions[f.Fixture.Id];
            if (!pred.Home.HasValue || !pred.Away.HasValue)
                return false;
        }
        return true;
    }

    private void SendEmail(string email)
    {
        var subject = $"Predictions {Season} GW{Week}";
        var body = BuildEmailBody(email);
        var url = $"mailto:{email}?subject={Uri.EscapeDataString(subject)}&body={Uri.EscapeDataString(body)}";
        NavigationManager.NavigateTo(url, true);
    }

    private string BuildEmailBody(string email)
    {
        if (_fixtures == null) return string.Empty;
        var sb = new StringBuilder();
        var groups = _fixtures.Response.GroupBy(f => f.Fixture.Date.Date).OrderBy(g => g.Key);
        foreach (var group in groups)
        {
            sb.AppendLine(group.Key.ToString("dddd, MMMM d, yyyy"));
            foreach (var fixture in group.OrderBy(x => x.Fixture.Date).ThenBy(x => x.Teams.Home.Name))
            {
                var pred = _predictions[fixture.Fixture.Id];
                sb.AppendLine($"{fixture.Teams.Home.Name} {pred.Home} - {pred.Away} {fixture.Teams.Away.Name}");
            }
            sb.AppendLine();
        }

        var body = sb.ToString();
        var specials = Config.GetSection("PredictionEmail:SpecialRecipients").Get<string[]>() ?? [];
        if (!specials.Any(s => string.Equals(s, email, StringComparison.OrdinalIgnoreCase))) return body;
        
        var sbPre = new StringBuilder();
        sbPre.AppendLine("Hello Helen Lyttle,");
        sbPre.AppendLine("");
        sbPre.AppendLine("I trust you are well.");
        sbPre.AppendLine("");
        sbPre.AppendLine("I would like to take this opportunity to put on record my continuing gratitude for your tireless efforts in administering the Premier League Prediction League.");
        sbPre.AppendLine("");
        sbPre.AppendLine("Here is a funny joke I heard recently that I thought you might enjoy...");
        sbPre.AppendLine("");
        sbPre.AppendLine("<insert joke>.");
        sbPre.AppendLine("");
        sbPre.AppendLine("My predictions are as follows...");
        sbPre.AppendLine("");
        var sbPost = new StringBuilder();
        sbPost.AppendLine("");
        sbPost.AppendLine("Yours sincerely,");
        sbPost.AppendLine("");
        sbPost.AppendLine("<insert name>.");

        return $"{sbPre}{body}{sbPost}";

    }

    private const string EmailStorageKey = "predictionsEmail";
    private class PredictionInput
    {
        public int? Home { get; set; }
        public int? Away { get; set; }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var delay = Config.GetValue<int?>("ScoreInputFocusDelayMs") ?? 500;
            await Js.InvokeVoidAsync("app.registerScoreInputs", delay);
        }
    }
}
