@page "/Subscription/Verify"
@rendermode InteractiveServer
@inject SubscriptionService SubscriptionService
@inject PersistentComponentState State
@implements IDisposable

<MudPaper Class="pa-4" Elevation="1">
    <MudStack Spacing="2">
        <h2>Verification</h2>
        @if (_result == null)
        {
            <p>Are you sure you want to verify your subscription?</p>
            <MudButton OnClick="HandleVerify" Color="Color.Primary" Variant="Variant.Filled">Verify</MudButton>
        }
        else if (_result == true)
        {
            <p>Your subscription has been verified.</p>
        }
        else
        {
            <p>Invalid verification link.</p>
        }
    </MudStack>
</MudPaper>

@code {
    [Parameter, SupplyParameterFromQuery]
    public string? token { get; set; }

    private bool? _result;
    private PersistingComponentStateSubscription? _persistSubscription;

    protected override void OnParametersSet()
    {
        if (State.TryTakeFromJson<bool?>(nameof(_result), out var result))
        {
            _result = result;
        }
    }

    protected override void OnInitialized()
    {
        _persistSubscription = State.RegisterOnPersisting(PersistState);
    }

    private async Task HandleVerify()
    {
        _result = await SubscriptionService.VerifyAsync(token ?? string.Empty);
    }

    private Task PersistState()
    {
        State.PersistAsJson(nameof(_result), _result);
        return Task.CompletedTask;
    }

    public void Dispose()
    {
        _persistSubscription?.Dispose();
    }
}
