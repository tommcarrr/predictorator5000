@page "/Subscription/Subscribe"
@rendermode InteractiveServer
@inject SubscriptionService SubscriptionService
@inject NavigationManager Navigation
@inject NotificationFeatureService Features

<MudPaper Class="pa-4" Elevation="1">
    <h2>Subscribe to Notifications</h2>
    @if (_emailSubmitted)
    {
        <p>A verification link has been sent to your email address. It will be valid for one hour.</p>
    }
    else if (_phoneSubmitted)
    {
        <p>A verification link has been sent to your phone. It will be valid for one hour.</p>
    }
    else
    {
        <MudTabs>
            @if (Features.EmailEnabled)
            {
                <MudTabPanel Text="Email">
                    <EditForm Model="_emailModel" OnValidSubmit="HandleEmailSubmit">
                        <MudStack Spacing="2">
                            <DataAnnotationsValidator />
                            <ValidationSummary />
                            <MudTextField @bind-Value="_emailModel.Email" Label="Email address" For="@(() => _emailModel.Email)" />
                            <MudButton ButtonType="ButtonType.Submit" Color="Color.Primary" Variant="Variant.Filled">Subscribe</MudButton>
                        </MudStack>
                    </EditForm>
                </MudTabPanel>
            }
            @if (Features.SmsEnabled)
            {
                <MudTabPanel Text="SMS">
                    <EditForm Model="_phoneModel" OnValidSubmit="HandlePhoneSubmit">
                        <MudStack Spacing="2">
                            <DataAnnotationsValidator />
                            <ValidationSummary />
                            <MudTextField @bind-Value="_phoneModel.PhoneNumber" Label="UK mobile number" HelperText="Format: 07xxxxxxxxx" For="@(() => _phoneModel.PhoneNumber)" />
                            <MudButton ButtonType="ButtonType.Submit" Color="Color.Primary" Variant="Variant.Filled">Subscribe</MudButton>
                        </MudStack>
                    </EditForm>
                </MudTabPanel>
            }
        </MudTabs>
    }
</MudPaper>

@code {
    private class EmailModel
    {
        [Required, EmailAddress]
        public string Email { get; set; } = string.Empty;
    }

    private class PhoneModel
    {
        [Required]
        [RegularExpression("^07\\d{9}$", ErrorMessage = "UK mobile numbers must start with 07 and contain 11 digits.")]
        public string PhoneNumber { get; set; } = string.Empty;
    }

    private readonly EmailModel _emailModel = new();
    private readonly PhoneModel _phoneModel = new();
    private bool _emailSubmitted;
    private bool _phoneSubmitted;

    private async Task HandleEmailSubmit()
    {
        var baseUrl = Navigation.BaseUri.TrimEnd('/');
        await SubscriptionService.SubscribeAsync(_emailModel.Email, null, baseUrl);
        _emailSubmitted = true;
    }

    private async Task HandlePhoneSubmit()
    {
        var baseUrl = Navigation.BaseUri.TrimEnd('/');
        await SubscriptionService.SubscribeAsync(null, _phoneModel.PhoneNumber, baseUrl);
        _phoneSubmitted = true;
    }
}
