@page "/parse"
@rendermode InteractiveServer
@inject IJSRuntime Js
@inject PredictionProcessingService ProcessingService
@inject ISnackbar Snackbar
@using System.Text
@using Predictorator.Core.Services
@using MudBlazor

<MudStack Spacing="2">
    <MudText Typo="Typo.h5" Class="my-4" Align="Align.Center">Parse Predictions</MudText>
    <MudTextField @bind-Value="_name" Label="Name" />
    <MudTextField @bind-Value="_input" Label="Predictions" Lines="10" />
    <MudButton OnClick="ParseText" Variant="Variant.Filled" Color="Color.Primary">Parse</MudButton>
</MudStack>

@if (_predictions.Any())
{
    <MudTable Items="_predictions" Dense="true" Class="mt-4" Breakpoint="Breakpoint.None">
        <HeaderContent>
            <MudTh>Name</MudTh>
            <MudTh>Date</MudTh>
            <MudTh>Home Team</MudTh>
            <MudTh>Home Prediction</MudTh>
            <MudTh>Home Actual</MudTh>
            <MudTh>Away Prediction</MudTh>
            <MudTh>Away Actual</MudTh>
            <MudTh>Away Team</MudTh>
            <MudTh>Points</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Name">@_name</MudTd>
            <MudTd DataLabel="Date">@context.Date.ToString("dd/MM/yyyy")</MudTd>
            <MudTd DataLabel="Home Team">@context.HomeTeam</MudTd>
            <MudTd DataLabel="Home Prediction">@context.HomeScore</MudTd>
            <MudTd DataLabel="Home Actual">@context.ActualHomeScore</MudTd>
            <MudTd DataLabel="Away Prediction">@context.AwayScore</MudTd>
            <MudTd DataLabel="Away Actual">@context.ActualAwayScore</MudTd>
            <MudTd DataLabel="Away Team">@context.AwayTeam</MudTd>
            <MudTd DataLabel="Points">@((context.ActualHomeScore.HasValue && context.ActualAwayScore.HasValue) ? context.Points : (int?)null)</MudTd>
        </RowTemplate>
    </MudTable>
    @if (_predictions.Any(p => p.ActualHomeScore.HasValue && p.ActualAwayScore.HasValue))
    {
        <MudText Class="mt-4 total-points">Total Points: @_predictions.Sum(p => p.Points)</MudText>
    }
    <div class="mt-4">
        <MudButton OnClick="CopyToClipboard" Variant="Variant.Filled" Color="Color.Secondary">Copy to Clipboard</MudButton>
    </div>
}

@code {
    private string _name = string.Empty;
    private string _input = string.Empty;
    private List<PredictionProcessingService.Prediction> _predictions = new();

    private async Task ParseText()
    {
        _name = _name.Trim();
        _predictions = (await ProcessingService.ProcessAsync(_input)).ToList();
    }

    private async Task CopyToClipboard()
    {
        if (_predictions.Count == 0)
            return;
        _name = _name.Trim();
        var sb = new StringBuilder();
        sb.AppendLine("Name\tDate\tHome Team\tHome Prediction\tHome Actual\tAway Prediction\tAway Actual\tAway Team\tPoints");
        foreach (var p in _predictions)
        {
            sb.AppendLine($"{_name}\t{p.Date:dd/MM/yyyy}\t{p.HomeTeam}\t{p.HomeScore}\t{p.ActualHomeScore?.ToString() ?? string.Empty}\t{p.AwayScore}\t{p.ActualAwayScore?.ToString() ?? string.Empty}\t{p.AwayTeam}\t{(p.ActualHomeScore.HasValue && p.ActualAwayScore.HasValue ? p.Points.ToString() : string.Empty)}");
        }
        var copied = await Js.InvokeAsync<bool>("app.copyToClipboardText", sb.ToString());
        if (copied)
        {
            Snackbar.Add("Copied to clipboard", Severity.Success);
        }
        else
        {
            Snackbar.Add("Failed to copy to clipboard", Severity.Error);
        }
    }
}
