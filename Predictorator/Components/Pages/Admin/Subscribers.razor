@rendermode InteractiveServer
@inject AdminService AdminService
@inject ToastInterop Toast
@inject IJSRuntime JS

<h2>Subscribers</h2>
@if (_items == null)
{
    <p>Loading...</p>
}
else
{
    <MudPaper Class="pa-2 mb-2">
        <MudStack Row="true" Spacing="2" AlignItems="AlignItems.Center">
            <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="@ExportAsync">Export CSV</MudButton>
            <MudButton Color="Color.Primary" Variant="Variant.Filled" HtmlTag="label">Import CSV
                <InputFile OnChange="@ImportAsync" style="display:none" />
            </MudButton>
        </MudStack>
    </MudPaper>
    <MudPaper Class="pa-2 mb-2">
        <EditForm Model="_newSub" OnValidSubmit="AddSubscriberAsync">
            <MudStack Row="true" Spacing="2" AlignItems="AlignItems.Center">
                <MudTextField @bind-Value="_newSub.Contact" Label="Email or phone" For="@(()=>_newSub.Contact)" />
                <MudSelect T="string" @bind-Value="_newSub.Type" Label="Type" Required="true">
                    <MudSelectItem Value="@("Email")">Email</MudSelectItem>
                    <MudSelectItem Value="@("SMS")">SMS</MudSelectItem>
                </MudSelect>
                <MudButton ButtonType="ButtonType.Submit" Color="Color.Primary" Variant="Variant.Filled">Add</MudButton>
            </MudStack>
        </EditForm>
    </MudPaper>
    <EditForm Model="this" OnValidSubmit="SendTestAsync">
        <MudTable Items="_items" Hover="true" Breakpoint="Breakpoint.None">
            <HeaderContent>
                <MudTh></MudTh>
                <MudTh>Contact</MudTh>
                <MudTh>Status</MudTh>
                <MudTh></MudTh>
            </HeaderContent>
            <RowTemplate Context="row">
                <MudTd><MudCheckBox T="bool" @bind-Value="row.Selected" /></MudTd>
                <MudTd>@row.Contact</MudTd>
                <MudTd>
                    @if (row.IsVerified)
                    {
                        <MudChip T="string" Color="Color.Success" Variant="Variant.Filled">Verified</MudChip>
                    }
                    else
                    {
                        <MudChip T="string" Color="Color.Warning" Variant="Variant.Filled">Pending</MudChip>
                    }
                </MudTd>
                <MudTd>
                    @if (!row.IsVerified)
                    {
                        <MudButton Size="Size.Small" Color="Color.Success" Variant="Variant.Filled" OnClick="@(()=>ConfirmAsync(row))">Confirm</MudButton>
                    }
                    <MudButton Size="Size.Small" Color="Color.Error" Variant="Variant.Filled" OnClick="@(()=>DeleteAsync(row))">Delete</MudButton>
                </MudTd>
            </RowTemplate>
        </MudTable>
        <MudPaper Class="pa-2 mt-2">
            <MudText Typo="Typo.h6">Test Notifications</MudText>
            <MudStack Row="true" Spacing="2" Class="mt-2">
                <MudButton ButtonType="ButtonType.Submit" Color="Color.Primary" Variant="Variant.Filled">Send Test</MudButton>
            </MudStack>
        </MudPaper>
        <MudPaper Class="pa-2 mt-2">
            <MudText Typo="Typo.h6">Sample Notifications</MudText>
            <MudStack Row="true" Spacing="2" Class="mt-2">
                <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="@SendNewFixturesSampleAsync">New Fixtures Sample</MudButton>
                <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="@SendStartingSoonSampleAsync">Starting Soon Sample</MudButton>
            </MudStack>
        </MudPaper>
        <MudPaper Class="pa-2 mt-2">
            <MudText Typo="Typo.h6">Schedule Sample Notification</MudText>
            <MudStack Row="true" Spacing="2" Class="mt-2" AlignItems="AlignItems.Center">
                <MudDatePicker @bind-Date="_sampleDate" Label="Date" Class="mr-2" />
                <MudTimePicker @bind-Time="_sampleTime" Label="Time" Class="mr-2" />
                <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="@ScheduleStartingSoonSampleAsync">Schedule Starting Soon Sample</MudButton>
            </MudStack>
        </MudPaper>
    </EditForm>
    <MudPaper Class="pa-2 mt-4">
        <MudText Typo="Typo.h6">Schedule Real Notifications</MudText>
        <MudStack Row="true" Spacing="2" Class="mt-2" AlignItems="AlignItems.Center">
            <MudDatePicker @bind-Date="_realDate" Label="Date" Class="mr-2" />
            <MudTimePicker @bind-Time="_realTime" Label="Time" Class="mr-2" />
            <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="@ScheduleNewFixturesAsync">Schedule New Fixtures</MudButton>
            <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="@ScheduleFixturesStartingSoonAsync">Schedule Fixtures Starting Soon</MudButton>
        </MudStack>
    </MudPaper>
}

@code {
    private class Item : AdminSubscriberDto
    {
        public Item(int id, string contact, bool verified, string type) : base(id, contact, verified, type)
        {
        }

        public bool Selected { get; set; }
    }

    private class NewSubscriberModel
    {
        public string Contact { get; set; } = string.Empty;
        public string Type { get; set; } = "Email";
    }

    private List<Item>? _items;
    private NewSubscriberModel _newSub = new();
    private DateTime? _sampleDate = DateTime.Today;
    private TimeSpan? _sampleTime = TimeSpan.FromHours(9);
    private DateTime? _realDate = DateTime.Today;
    private TimeSpan? _realTime = TimeSpan.FromHours(9);

    protected override async Task OnInitializedAsync()
    {
        var data = await AdminService.GetSubscribersAsync();
        _items = data.Select(d => new Item(d.Id, d.Contact, d.IsVerified, d.Type)).ToList();
    }

    private async Task ConfirmAsync(Item item)
    {
        await AdminService.ConfirmAsync(item.Type, item.Id);
        item.IsVerified = true;
    }

    private async Task DeleteAsync(Item item)
    {
        await AdminService.DeleteAsync(item.Type, item.Id);
        _items!.Remove(item);
    }

    private async Task AddSubscriberAsync()
    {
        var result = await AdminService.AddSubscriberAsync(_newSub.Type, _newSub.Contact);
        if (result != null)
        {
            _items!.Add(new Item(result.Id, result.Contact, result.IsVerified, result.Type));
            await Toast.ShowToast("Subscriber added!", "success");
            _newSub = new();
        }
        else
        {
            await Toast.ShowToast("Subscriber already exists.", "error");
        }
    }

    private async Task SendTestAsync()
    {
        var selected = _items!.Where(i => i.Selected).Cast<AdminSubscriberDto>().ToList();
        if (!selected.Any())
            return;

        try
        {
            await AdminService.SendTestAsync(selected);
            await Toast.ShowToast("Test notifications sent!", "success");
        }
        catch
        {
            await Toast.ShowToast("Failed to send test notifications.", "error");
        }
    }

    private async Task ExportAsync()
    {
        try
        {
            var csv = await AdminService.ExportSubscribersCsvAsync();
            await JS.InvokeVoidAsync("app.downloadFile", $"subscribers-{DateTime.UtcNow:yyyyMMddHHmmss}.csv", csv);
        }
        catch
        {
            await Toast.ShowToast("Failed to export subscribers.", "error");
        }
    }

    private async Task ImportAsync(InputFileChangeEventArgs e)
    {
        if (e.FileCount == 0) return;
        try
        {
            using var stream = e.File.OpenReadStream(long.MaxValue);
            var added = await AdminService.ImportSubscribersCsvAsync(stream);
            var data = await AdminService.GetSubscribersAsync();
            _items = data.Select(d => new Item(d.Id, d.Contact, d.IsVerified, d.Type)).ToList();
            await Toast.ShowToast($"Imported {added} subscribers.", "success");
        }
        catch
        {
            await Toast.ShowToast("Failed to import subscribers.", "error");
        }
    }

    private async Task SendNewFixturesSampleAsync()
    {
        var selected = _items!.Where(i => i.Selected).Cast<AdminSubscriberDto>().ToList();
        if (!selected.Any())
            return;

        try
        {
            await AdminService.SendNewFixturesSampleAsync(selected);
            await Toast.ShowToast("Sample notifications sent!", "success");
        }
        catch
        {
            await Toast.ShowToast("Failed to send sample notifications.", "error");
        }
    }

    private async Task SendStartingSoonSampleAsync()
    {
        var selected = _items!.Where(i => i.Selected).Cast<AdminSubscriberDto>().ToList();
        if (!selected.Any())
            return;

        try
        {
            await AdminService.SendFixturesStartingSoonSampleAsync(selected);
            await Toast.ShowToast("Sample notifications sent!", "success");
        }
        catch
        {
            await Toast.ShowToast("Failed to send sample notifications.", "error");
        }
    }

    private async Task ScheduleStartingSoonSampleAsync()
    {
        var selected = _items!.Where(i => i.Selected).Cast<AdminSubscriberDto>().ToList();
        if (!selected.Any())
        {
            await Toast.ShowToast("Please select at least one subscriber.", "error");
            return;
        }

        if (_sampleDate == null || _sampleTime == null)
        {
            await Toast.ShowToast("Please choose a date and time.", "error");
            return;
        }

        var uk = TimeZoneInfo.FindSystemTimeZoneById("GMT Standard Time");
        var sendLocal = DateTime.SpecifyKind(_sampleDate.Value.Date + _sampleTime.Value, DateTimeKind.Unspecified);
        var sendUtc = TimeZoneInfo.ConvertTimeToUtc(sendLocal, uk);

        try
        {
            await AdminService.ScheduleFixturesStartingSoonSampleAsync(selected, sendUtc);
            await Toast.ShowToast("Sample notification scheduled!", "success");
        }
        catch
        {
            await Toast.ShowToast("Failed to schedule sample notification.", "error");
        }
    }

    private async Task ScheduleNewFixturesAsync()
    {
        if (_realDate == null || _realTime == null)
        {
            await Toast.ShowToast("Please choose a date and time.", "error");
            return;
        }

        var uk = TimeZoneInfo.FindSystemTimeZoneById("GMT Standard Time");
        var sendLocal = DateTime.SpecifyKind(_realDate.Value.Date + _realTime.Value, DateTimeKind.Unspecified);
        var sendUtc = TimeZoneInfo.ConvertTimeToUtc(sendLocal, uk);

        try
        {
            await AdminService.ScheduleNewFixturesAsync(sendUtc);
            await Toast.ShowToast("New fixtures notification scheduled!", "success");
        }
        catch
        {
            await Toast.ShowToast("Failed to schedule new fixtures notification.", "error");
        }
    }

    private async Task ScheduleFixturesStartingSoonAsync()
    {
        if (_realDate == null || _realTime == null)
        {
            await Toast.ShowToast("Please choose a date and time.", "error");
            return;
        }

        var uk = TimeZoneInfo.FindSystemTimeZoneById("GMT Standard Time");
        var sendLocal = DateTime.SpecifyKind(_realDate.Value.Date + _realTime.Value, DateTimeKind.Unspecified);
        var sendUtc = TimeZoneInfo.ConvertTimeToUtc(sendLocal, uk);

        try
        {
            await AdminService.ScheduleFixturesStartingSoonAsync(sendUtc);
            await Toast.ShowToast("Starting soon notification scheduled!", "success");
        }
        catch
        {
            await Toast.ShowToast("Failed to schedule starting soon notification.", "error");
        }
    }
}
